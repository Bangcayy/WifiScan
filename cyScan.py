import base64
exec(base64.b64decode('ZnJvbSBzY2FweS5hbGwgaW1wb3J0ICoKaW1wb3J0IG9zCmZyb20gY29sb3JhbWEgaW1wb3J0IEZvcmUsIFN0eWxlLCBpbml0CmZyb20gcmljaC5jb25zb2xlIGltcG9ydCBDb25zb2xlCmZyb20gcmljaC50YWJsZSBpbXBvcnQgVGFibGUKZnJvbSByaWNoLnByb2dyZXNzIGltcG9ydCB0cmFjawpmcm9tIHJpY2guYWxpZ24gaW1wb3J0IEFsaWduCmZyb20gcmljaC50ZXh0IGltcG9ydCBUZXh0CmltcG9ydCB0aW1lCgojIEluaXNpYWxpc2FzaSBDb2xvcmFtYSB1bnR1ayB3YXJuYSB0ZXJtaW5hbAppbml0KGF1dG9yZXNldD1UcnVlKQpjb25zb2xlID0gQ29uc29sZSgpCgojIEFTQ0lJIGFydCBkYW4gaW5mb3JtYXNpIGRldmVsb3Blcgphc2NpaV9hcnQgPSAiIiIK4qCA4qCA4qCA4qCA4qCA4qCA4qOA4qOA4qOA4qCA4qCA4qCA4qCA4qCA4qCA4qCA4qCA4qCA4qCA4qCA4qCA4qCA4qCA4qCA4qCA4qCA4qCA4qCA4qCA4qCA4qCA4qCACuKggOKggOKggOKigOKjtOKjv+Kjv+Kgv+Kjn+Kit+KjhOKggOKggOKggOKggOKggOKggOKggOKggOKggOKggOKggOKggOKggOKggOKggOKggOKggOKggOKggOKggOKggArioIDioIDioIDiorjio4/ioY/ioIDioIDioIDioqPiorvio4bioIDioIDioIDioIDioIDioIDioIDioIDioIDioIDioIDioIDioIDioIDioIDioIDioIDioIDioIDioIAK4qCA4qCA4qCA4qK44qOf4qCn4qCk4qCk4qCk4qCL4qCA4qK/4qGA4qCA4qCA4qCA4qCA4qCA4qCA4qCA4qCA4qCA4qCA4qCA4qCA4qCA4qCA4qCA4qCA4qCA4qCA4qCACuKggOKggOKggOKggOKjv+KhhuKggOKggOKggOKggOKggOKguOKjt+KggOKggOKggOKggOKggOKggOKggOKggOKggOKggOKggOKggOKggOKggOKggOKggOKggOKggOKggArioIDioIDioIDioIDioJjio7/ioYDiooDio7bioKTioJLioIDiorvio4fioIDioIDioIDioIDioIDioIDioIDioIDioIDioIDioIDioIDioIDioIDioIDioIDioIDioIAK4qCA4qCA4qCA4qCA4qCA4qK54qOn4qCA4qCA4qCA4qCA4qCA4qCI4qK/4qOG4qCA4qCA4qCA4qCA4qCA4qCA4qCA4qCA4qCA4qCA4qCA4qCA4qCA4qCA4qCA4qCA4qCACuKggOKggOKggOKggOKggOKggOKjv+KhhuKggOKggOKggOKggOKggOKgiOKiv+KjhuKjoOKjpOKjpOKjpOKjpOKjtOKjpuKjhOKhgOKggOKggOKggOKggOKggOKggOKggArioIDioIDioIDioIDiooDio77ior/ior/ioIDioIDioIDiooDio4Dio4DioJjio7/ioIvioIHioIDioJnioofioIDioIDioJnior/io6bioYDioIDioIDioIDioIDioIAK4qCA4qCA4qCA4qKA4qO+4qKH4qGe4qCY4qOn4qCA4qKW4qGt4qCe4qKb4qGE4qCY4qOG4qCA4qCA4qCA4qCI4qKn4qCA4qCA4qCA4qCZ4qK/4qOE4qCA4qCA4qCA4qCACuKggOKggOKjoOKjv+Kjm+KjpeKgpOKgpOKiv+KhhOKggOKggOKgiOKgieKggOKggOKgueKhhOKggOKggOKggOKgiOKip+KggOKggOKggOKgiOKgu+KjpuKggOKggOKggArioIDio7zioZ/iobHioJvioJnioIDioIDioJjiorfioYDioIDioIDioIDioIDioIDioIDioLnioYDioIDioIDioIDioIjio6fioIDioIDioIDioIDioLnio6fioYDioIAK4qK44qGP4qKg4qCD4qCA4qCA4qCA4qCA4qCA4qCA4qKz4qGA4qCA4qCA4qCA4qCA4qCA4qCA4qKz4qGA4qCA4qCA4qCA4qCY4qOn4qCA4qCA4qCA4qCA4qC44qO34qGACuKguOKjp+KgmOKhh+KggOKggOKggOKggOKggOKggOKggOKis+KhgOKggOKggOKggOKggOKggOKggOKio+KggOKggOKggOKggOKiueKhh+KggOKggOKggOKggOKjv+KghwrioIDio7/ioYTiorPioIDioIDioIDioIDioIDioIDioIDioIjio7fioIDioIDioIDioIDioIDioIDioIjioIbioIDioIDioIDioIHioIDioIDioIDioIDio7zioZ/ioIAK4qCA4qK54qGH4qCY4qOH4qCA4qCA4qCA4qCA4qCA4qCA4qCw4qO/4qGG4qCA4qCA4qCA4qCA4qCA4qCA4qCA4qCA4qCA4qCA4qCA4qCA4qGE4qCA4qO84qGf4qCA4qCACuKggOKiuOKhh+KggOKiueKhhuKggOKggOKggOKggOKggOKggOKgmeKggeKggOKggOKggOKggOKggOKggOKggOKggOKhgOKggOKggOKggOKis+KjvOKgn+KggOKggOKggArioIDioLjio6fio4DioIDiorPioYDioIDioIDioIDioIDioIDioIDioIDioYTioIDioIDioIDioIDioIDioIDioIDiooPioIDiooDio7Tiob/ioIHioIDioIDioIDioIAK4qCA4qCA4qCI4qCZ4qK34qOE4qKz4qGA4qCA4qCA4qCA4qCA4qCA4qCA4qKz4qGA4qCA4qCA4qCA4qCA4qCA4qOg4qG/4qCf4qCb4qCJ4qCA4qCA4qCA4qCA4qCA4qCACuKggOKggOKggOKggOKgiOKgu+Kiv+Kjt+KjpuKjhOKjgOKjgOKjoOKjpOKgvuKgt+KjpuKjpOKjpOKhtuKgn+Kgi+KggOKggOKggOKggOKggOKggOKggOKggOKggOKggArioIDioIDioIDioIDioIDioIDioIDioIjioInioJvioJvioInioIHioIDioIDioIDioIDioIDioIDioIDioIDioIDioIDioIDioIDioIDioIDioIDioIDioIDioIDioIAKClsgRGV2ZWxvcGVyIF0KTmFtZSAgICA6IEN5NTcgQW5kIEFJClRlbGVncmFtOiBAYmFuZ2NheXk1NwpUZWFtICAgIDogSSBBTSBBTE9ORQoiIiIKCmRlZiBkaXNwbGF5X2NlbnRlcmVkX3RleHQodGV4dCwgc3R5bGU9IiIpOgogICAgIiIiTWVuYW1waWxrYW4gdGVrcyBkZW5nYW4gYW5pbWFzaSBiZXJndWxpciBkYW4gZGkgdGVuZ2FoLiIiIgogICAgY29uc29sZS5jbGVhcigpCiAgICBjb25zb2xlLnByaW50KEFsaWduLmNlbnRlcih0ZXh0LCBzdHlsZT1zdHlsZSkpCgpkZWYgd2lmaV9zY2FuKCk6CiAgICAjIFRhbXBpbGthbiBBU0NJSSBhcnQgZGFuIGluZm9ybWFzaSBkZXZlbG9wZXIgZGkgdGVuZ2FoIHNla2FsaQogICAgZGlzcGxheV9jZW50ZXJlZF90ZXh0KGFzY2lpX2FydCwgc3R5bGU9ImJvbGQgY3lhbiIpCgogICAgIyBNZW51IHBpbGloYW4gdW50dWsgc2Nhbm5pbmcKICAgIGNvbnNvbGUucHJpbnQoQWxpZ24uY2VudGVyKCJbYm9sZCB5ZWxsb3ddUGlsaWggTWVudTpbL2JvbGQgeWVsbG93XSIpKQogICAgY29uc29sZS5wcmludChBbGlnbi5jZW50ZXIoIlsxXSBTY2FubmluZyBJUCBBZGRyZXNzIikpCiAgICBjb25zb2xlLnByaW50KEFsaWduLmNlbnRlcigiWzJdIFNjYW5uaW5nIE1BQyBBZGRyZXNzIikpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUucHJpbnQoQWxpZ24uY2VudGVyKCJbM10gU2Nhbm5pbmcgVmVuZG9yIikpCgogICAgIyBBbWJpbCBpbnB1dCBkZW5nYW4gcGVtYmVyc2loYW4gbGF5YXIgc2V0ZWxhaG55YQogICAgY2hvaWNlID0gaW5wdXQoIlBpbGloIFNjYW5uaW5nICgxLzIvMyk6ICIpCiAgICBjb25zb2xlLmNsZWFyKCkKCiAgICAjIE1lbnlpYXBrYW4gbW9kZSBtb25pdG9yIChMaW51eCkKICAgIG9zLnN5c3RlbSgic3VkbyBpcCBsaW5rIHNldCB3bGFuMCBkb3duIikKICAgIG9zLnN5c3RlbSgic3VkbyBpdyBkZXYgd2xhbjAgc2V0IHR5cGUgbW9uaXRvciIpCiAgICBvcy5zeXN0ZW0oInN1ZG8gaXAgbGluayBzZXQgd2xhbjAgdXAiKQoKICAgIG5ldHdvcmtzID0ge30KCiAgICBkZWYgcGFja2V0X2hhbmRsZXIocGFja2V0KToKICAgICAgICBpZiBwYWNrZXQuaGFzbGF5ZXIoRG90MTFCZWFjb24pIG9yIHBhY2tldC5oYXNsYXllcihEb3QxMVByb2JlUmVzcCk6CiAgICAgICAgICAgIHNzaWQgPSBwYWNrZXRbRG90MTFFbHRdLmluZm8uZGVjb2RlKGVycm9ycz0iaWdub3JlIikKICAgICAgICAgICAgYnNzaWQgPSBwYWNrZXRbRG90MTFdLmFkZHIyCiAgICAgICAgICAgIHNpZ25hbF9zdHJlbmd0aCA9IHBhY2tldC5kQm1fQW50U2lnbmFsCiAgICAgICAgICAgIGNoYW5uZWwgPSBpbnQob3JkKHBhY2tldFtEb3QxMUVsdDozXS5pbmZvKSkKCiAgICAgICAgICAgIGlmIGJzc2lkIG5vdCBpbiBuZXR3b3JrczoKICAgICAgICAgICAgICAgIG5ldHdvcmtzW2Jzc2lkXSA9IHsKICAgICAgICAgICAgICAgICAgICAiU1NJRCI6IHNzaWQsCiAgICAgICAgICAgICAgICAgICAgIlNpZ25hbCI6IHNpZ25hbF9zdHJlbmd0aCwKICAgICAgICAgICAgICAgICAgICAiQ2hhbm5lbCI6IGNoYW5uZWwsCiAgICAgICAgICAgICAgICAgICAgIkJTU0lEIjogYnNzaWQKICAgICAgICAgICAgICAgIH0KCiAgICBkaXNwbGF5X2NlbnRlcmVkX3RleHQoIltib2xkIGN5YW5dU2Nhbm5pbmcgV2ktRmkgbmV0d29ya3MuLi5bL2JvbGQgY3lhbl0iKQoKICAgICMgQW5pbWFzaSBwcm9ncmVzcwogICAgZm9yIF8gaW4gdHJhY2socmFuZ2UoMTApLCBkZXNjcmlwdGlvbj0iU2Nhbm5pbmcuLi4iLCB0cmFuc2llbnQ9VHJ1ZSk6CiAgICAgICAgdGltZS5zbGVlcCgxKQoKICAgICMgU25pZmZpbmcgcGFrZXQKICAgIHRyeToKICAgICAgICBzbmlmZihpZmFjZT0id2xhbjAiLCBwcm49cGFja2V0X2hhbmRsZXIsIHRpbWVvdXQ9MTApCiAgICBleGNlcHQgS2V5Ym9hcmRJbnRlcnJ1cHQ6CiAgICAgICAgcGFzcwoKICAgICMgVGFtcGlsa2FuIGhhc2lsIGRhbGFtIHRhYmVsIGRlbmdhbiBSaWNoCiAgICB0YWJsZSA9IFRhYmxlKHRpdGxlPSJXaS1GaSBOZXR3b3JrcyIsIGJveD0iUk9VTkRFRCIpCiAgICB0YWJsZS5jZW50ZXJlZCA9IFRydWUKCiAgICAjIEtvbmRpc2kgdW50dWsgbWVuYW1waWxrYW4gaGFzaWwgYmVyZGFzYXJrYW4gcGlsaWhhbiBtZW51CiAgICBpZiBjaG9pY2UgPT0gIjEiOgogICAgICAgIHRhYmxlLmFkZF9jb2x1bW4oIlNTSUQiLCBzdHlsZT0iY3lhbiIsIGp1c3RpZnk9ImNlbnRlciIpCiAgICAgICAgdGFibGUuYWRkX2NvbHVtbigiSVAgQWRkcmVzcyIsIHN0eWxlPSJncmVlbiIsIGp1c3RpZnk9ImNlbnRlciIpCiAgICAgICAgZm9yIGJzc2lkIGluIG5ldHdvcmtzOgogICAgICAgICAgICBzc2lkID0gbmV0d29ya3NbYnNzaWRdWyJTU0lEIl0KICAgICAgICAgICAgaXBfYWRkcmVzcyA9ICIxOTIuMTY4LjAuMSIgICMgUGxhY2Vob2xkZXIKICAgICAgICAgICAgdGFibGUuYWRkX3Jvdyhzc2lkLCBpcF9hZGRyZXNzKQoKICAgIGVsaWYgY2hvaWNlID09ICIyIjoKICAgICAgICB0YWJsZS5hZGRfY29sdW1uKCJTU0lEIiwgc3R5bGU9ImN5YW4iLCBqdXN0aWZ5PSJjZW50ZXIiKQogICAgICAgIHRhYmxlLmFkZF9jb2x1bW4oIk1BQyBBZGRyZXNzIiwgc3R5bGU9Im1hZ2VudGEiLCBqdXN0aWZ5PSJjZW50ZXIiKQogICAgICAgIGZvciBic3NpZCBpbiBuZXR3b3JrczoKICAgICAgICAgICAgc3NpZCA9IG5ldHdvcmtzW2Jzc2lkXVsiU1NJRCJdCiAgICAgICAgICAgIG1hY19hZGRyZXNzID0gbmV0d29ya3NbYnNzaWRdWyJCU1NJRCJdCiAgICAgICAgICAgIHRhYmxlLmFkZF9yb3coc3NpZCwgbWFjX2FkZHJlc3MpCgogICAgZWxpZiBjaG9pY2UgPT0gIjMiOgogICAgICAgIHRhYmxlLmFkZF9jb2x1bW4oIlNTSUQiLCBzdHlsZT0iY3lhbiIsIGp1c3RpZnk9ImNlbnRlciIpCiAgICAgICAgdGFibGUuYWRkX2NvbHVtbigiVmVuZG9yIiwgc3R5bGU9InllbGxvdyIsIGp1c3RpZnk9ImNlbnRlciIpCiAgICAgICAgZm9yIGJzc2lkIGluIG5ldHdvcmtzOgogICAgICAgICAgICBzc2lkID0gbmV0d29ya3NbYnNzaWRdWyJTU0lEIl0KICAgICAgICAgICAgdmVuZG9yID0gIlVua25vd24gVmVuZG9yIiAgIyBQbGFjZWhvbGRlcgogICAgICAgICAgICB0YWJsZS5hZGRfcm93KHNzaWQsIHZlbmRvcikKICAgIGVsc2U6CiAgICAgICAgZGlzcGxheV9jZW50ZXJlZF90ZXh0KCJbYm9sZCByZWRdUGlsaWhhbiB0aWRhayB2YWxpZCFbL2JvbGQgcmVkXSIpCiAgICAgICAgcmV0dXJuCgogICAgIyBNZW5hbXBpbGthbiB0YWJlbCBkaSB0ZW5nYWgKICAgIGNvbnNvbGUucHJpbnQoQWxpZ24uY2VudGVyKHRhYmxlKSkKCmlmIF9fbmFtZV9fID09ICJfX21haW5fXyI6CiAgICB3aWZpX3NjYW4oKQo='))